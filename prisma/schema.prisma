// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Property {
  id             Int      @id @default(autoincrement())
  imagem         String
  endereco       String
  bairro         String
  cidade         String
  tipo           String
  tipoNegocio    String
  categoria      String
  metragem       Int
  areaConstruida Int?
  quartos        Int
  suites         Int?
  banheiros      Int
  vagas          Int
  preco          Float
  infoExtra      String?
  descricao      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  favorites      Favorite[]
}
model User {
  id           Int      @id @default(autoincrement())
  nome         String
  telefone     String
  email        String   @unique
  senha        String
  cidade       String
  avatarUrl    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  ultimoAcesso DateTime @default(now()) // ✅ Esse campo precisa estar aqui

  simulations  Simulation[]
  preferencias NotificacaoPreferencia[]
  favorites    Favorite[]
}


model Simulation {
  id               Int      @id @default(autoincrement())
  title            String
  entry            Float
  installments     Int
  installmentValue Float
  date             DateTime @default(now())
  user             User     @relation(fields: [userId], references: [id])
  userId           Int
}

model NotificacaoPreferencia {
  id        Int      @id @default(autoincrement())
  userId    Int
  tipo      String
  porEmail  Boolean  @default(true)
  porPush   Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, tipo])
}

model Favorite {
  id         Int      @id @default(autoincrement())
  userId     Int
  propertyId Int
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])
  property   Property @relation(fields: [propertyId], references: [id])

  @@unique([userId, propertyId]) // garante que o mesmo usuário não favorite duas vezes o mesmo imóvel
}
