// src/routes/auth.routes.ts
import { Router } from "express";
import { PrismaClient } from "@prisma/client";
import bcrypt from "bcryptjs";
import { sendEmail } from "../utils/sendEmail";

export const authRouter = Router();
const prisma = new PrismaClient();

// üîë Gera um c√≥digo num√©rico de 6 d√≠gitos
function generate6DigitCode() {
  return String(Math.floor(Math.random() * 1_000_000)).padStart(6, "0");
}

const CODE_EXP_MIN = Number(process.env.RESET_CODE_EXP_MIN || 10);

/**
 * üîπ Envia um c√≥digo de redefini√ß√£o de senha para o e-mail informado
 * - Usa `userId` interno para armazenar no banco
 * - Retorna apenas mensagem gen√©rica para n√£o expor se o e-mail existe
 */
authRouter.post("/forgot-password", async (req, res) => {
  const { email } = req.body as { email?: string };

  if (!email) {
    return res.status(400).json({ error: "E-mail √© obrigat√≥rio." });
  }

  try {
    const user = await prisma.user.findUnique({ where: { email } });

    // ‚úÖ Sempre responde genericamente para evitar enumera√ß√£o de usu√°rios
    if (!user) {
      return res.json({ message: "Se houver conta, enviaremos um c√≥digo." });
    }

    // Apaga resets antigos n√£o usados
    await prisma.passwordReset.deleteMany({
      where: { userId: user.id, usedAt: null },
    });

    const code = generate6DigitCode();
    const codeHash = await bcrypt.hash(code, 10);
    const expiresAt = new Date(Date.now() + CODE_EXP_MIN * 60 * 1000);

    await prisma.passwordReset.create({
      data: { userId: user.id, codeHash, expiresAt },
    });

    await sendEmail({
      to: email,
      subject: "C√≥digo para redefini√ß√£o de senha",
      html: `
        <p>Seu c√≥digo de verifica√ß√£o √©:</p>
        <h2 style="font-size:22px;letter-spacing:2px">${code}</h2>
        <p>Ele expira em ${CODE_EXP_MIN} minutos.</p>
      `,
    });

    return res.json({ message: "Se houver conta, enviaremos um c√≥digo." });
  } catch (error) {
    console.error("forgot-password error:", error);
    return res.status(500).json({ error: "Erro ao enviar c√≥digo." });
  }
});

/**
 * üîπ Verifica se o c√≥digo enviado √© v√°lido
 * - Marca o reset como verificado caso o c√≥digo seja correto
 */
authRouter.post("/verify-reset-code", async (req, res) => {
  const { email, code } = req.body as { email?: string; code?: string };

  if (!email || !code) {
    return res.status(400).json({ error: "E-mail e c√≥digo s√£o obrigat√≥rios." });
  }

  try {
    const user = await prisma.user.findUnique({ where: { email } });
    if (!user) {
      return res.status(400).json({ error: "C√≥digo inv√°lido." });
    }

    const reset = await prisma.passwordReset.findFirst({
      where: { userId: user.id, usedAt: null },
      orderBy: { createdAt: "desc" },
    });
    if (!reset) {
      return res.status(400).json({ error: "C√≥digo inv√°lido ou expirado." });
    }

    if (reset.expiresAt < new Date()) {
      return res.status(400).json({ error: "C√≥digo expirado." });
    }

    const ok = await bcrypt.compare(code, reset.codeHash);
    if (!ok) {
      return res.status(400).json({ error: "C√≥digo inv√°lido." });
    }

    await prisma.passwordReset.update({
      where: { id: reset.id },
      data: { verifiedAt: new Date() },
    });

    return res.json({
      message: "C√≥digo verificado com sucesso.",
      // ‚úÖ Retorna tamb√©m uuid do usu√°rio para front-end opcionalmente usar em links
      userUuid: user.uuid ?? null,
    });
  } catch (error) {
    console.error("verify-reset-code error:", error);
    return res.status(500).json({ error: "Erro ao verificar c√≥digo." });
  }
});

/**
 * üîπ Redefine a senha do usu√°rio
 * - Exige que o c√≥digo tenha sido verificado
 */
authRouter.post("/reset-password", async (req, res) => {
  const { email, newPassword } = req.body as {
    email?: string;
    newPassword?: string;
  };

  if (!email || !newPassword) {
    return res
      .status(400)
      .json({ error: "E-mail e nova senha s√£o obrigat√≥rios." });
  }
  if (newPassword.length < 6) {
    return res.status(400).json({ error: "Senha muito curta (m√≠nimo 6)." });
  }

  try {
    const user = await prisma.user.findUnique({ where: { email } });
    if (!user) {
      return res.status(404).json({ error: "Usu√°rio n√£o encontrado." });
    }

    const reset = await prisma.passwordReset.findFirst({
      where: {
        userId: user.id,
        verifiedAt: { not: null },
        usedAt: null,
      },
      orderBy: { createdAt: "desc" },
    });
    if (!reset) {
      return res
        .status(400)
        .json({ error: "Nenhum c√≥digo verificado encontrado." });
    }
    if (reset.expiresAt < new Date()) {
      return res.status(400).json({ error: "C√≥digo expirado." });
    }

    const senhaHash = await bcrypt.hash(newPassword, 10);

    await prisma.user.update({
      where: { id: user.id },
      data: { senha: senhaHash },
    });

    await prisma.passwordReset.update({
      where: { id: reset.id },
      data: { usedAt: new Date() },
    });

    // Limpeza de resets pendentes
    await prisma.passwordReset.deleteMany({
      where: { userId: user.id, usedAt: null },
    });

    return res.json({
      message: "Senha redefinida com sucesso.",
      userUuid: user.uuid ?? null, // ‚úÖ Opcional para o front
    });
  } catch (error) {
    console.error("reset-password error:", error);
    return res.status(500).json({ error: "Erro ao redefinir senha." });
  }
});
