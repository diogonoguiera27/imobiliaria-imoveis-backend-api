generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Property {
  id              Int               @id @default(autoincrement())
  suites          Int?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  areaConstruida  Int?
  bairro          String
  banheiros       Int
  categoria       String
  cidade          String
  descricao       String?
  endereco        String
  imagem          String
  metragem        Int
  preco           Float
  quartos         Int
  tipo            String
  tipoNegocio     String
  vagas           Int
  userId          Int?
  caracteristicas String[]          @default([])
  ativo           Boolean           @default(true)
  /// ✅ UUID já existente no banco
  uuid            String?           @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  favorites       Favorite[]
  user            User?             @relation(fields: [userId], references: [id])
  contacts        PropertyContact[]
  views           PropertyView[]

  @@index([cidade])
  @@index([userId])
}

model User {
  id             Int                      @id @default(autoincrement())
  nome           String
  telefone       String
  email          String                   @unique
  senha          String
  cidade         String
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  avatarUrl      String?
  ultimoAcesso   DateTime                 @default(now())
  /// ✅ UUID já existente no banco
  uuid           String?                  @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  favorites      Favorite[]
  preferencias   NotificacaoPreferencia[]
  passwordResets PasswordReset[]
  properties     Property[]
  contacts       PropertyContact[]
  views          PropertyView[]
  simulations    Simulation[]
}

model Simulation {
  id               Int      @id @default(autoincrement())
  title            String
  entry            Float
  installments     Int
  installmentValue Float
  date             DateTime @default(now())
  userId           Int
  /// ✅ UUID já existente no banco
  uuid             String?  @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  user             User     @relation(fields: [userId], references: [id])
}

model NotificacaoPreferencia {
  id        Int      @id @default(autoincrement())
  userId    Int
  tipo      String
  porEmail  Boolean  @default(true)
  porPush   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  /// ✅ UUID já existente no banco
  uuid      String?  @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, tipo])
}

model Favorite {
  id         Int      @id @default(autoincrement())
  userId     Int
  propertyId Int
  createdAt  DateTime @default(now())
  /// ✅ UUID já existente no banco
  uuid       String?  @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  property   Property @relation(fields: [propertyId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, propertyId])
}

model PasswordReset {
  id         Int       @id @default(autoincrement())
  userId     Int
  codeHash   String
  expiresAt  DateTime
  verifiedAt DateTime?
  usedAt     DateTime?
  createdAt  DateTime  @default(now())
  /// ✅ UUID já existente no banco
  uuid       String?   @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  user       User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model PropertyView {
  id         Int      @id @default(autoincrement())
  propertyId Int
  userId     Int?
  viewedAt   DateTime @default(now())
  /// ✅ UUID já existente no banco
  uuid       String?  @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  property   Property @relation(fields: [propertyId], references: [id])
  user       User?    @relation(fields: [userId], references: [id])

  @@index([propertyId])
  @@index([userId])
}

model PropertyContact {
  id         Int      @id @default(autoincrement())
  propertyId Int
  userId     Int?
  nome       String?
  email      String?
  telefone   String?
  mensagem   String?
  createdAt  DateTime @default(now())
  /// ✅ UUID já existente no banco
  uuid       String?  @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  property   Property @relation(fields: [propertyId], references: [id])
  user       User?    @relation(fields: [userId], references: [id])

  @@index([propertyId])
  @@index([userId])
}
