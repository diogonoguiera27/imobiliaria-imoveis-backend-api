generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Property {
  id             Int       @id @default(autoincrement())
  imagem         String
  endereco       String
  bairro         String
  cidade         String
  tipo           String
  tipoNegocio    String
  categoria      String
  metragem       Int
  areaConstruida Int?      
  quartos        Int
  suites         Int?      
  banheiros      Int
  vagas          Int
  preco          Float
  caracteristicas String[] @default([])
  descricao      String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  views          PropertyView[]
  contacts       PropertyContact[] 
  
  ativo          Boolean   @default(true)
 
  userId         Int?
  user           User?     @relation(fields: [userId], references: [id])

  favorites      Favorite[]

  @@index([cidade])
  @@index([userId])
}

model User {
  id           Int       @id @default(autoincrement())
  nome         String
  telefone     String
  email        String    @unique
  senha        String
  cidade       String
  avatarUrl    String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  ultimoAcesso DateTime  @default(now())
  views          PropertyView[]
  contacts       PropertyContact[]

  properties   Property[]
  simulations  Simulation[]
  preferencias NotificacaoPreferencia[]
  favorites    Favorite[]
  passwordResets PasswordReset[]
}

model Simulation {
  id               Int      @id @default(autoincrement())
  title            String
  entry            Float
  installments     Int
  installmentValue Float
  date             DateTime @default(now())
  user             User     @relation(fields: [userId], references: [id])
  userId           Int
}

model NotificacaoPreferencia {
  id        Int      @id @default(autoincrement())
  userId    Int
  tipo      String
  porEmail  Boolean  @default(true)
  porPush   Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, tipo])
}

model Favorite {
  id         Int      @id @default(autoincrement())
  userId     Int
  propertyId Int
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])
  property   Property @relation(fields: [propertyId], references: [id])

  @@unique([userId, propertyId])
}

model PasswordReset {
  id         Int       @id @default(autoincrement())
  userId     Int
  user       User      @relation(fields: [userId], references: [id])
  codeHash   String
  expiresAt  DateTime
  verifiedAt DateTime?
  usedAt     DateTime?
  createdAt  DateTime  @default(now())

  @@index([userId])
}


model PropertyView {
  id         Int       @id @default(autoincrement())
  property   Property  @relation(fields: [propertyId], references: [id])
  propertyId Int
  user       User?     @relation(fields: [userId], references: [id])
  userId     Int?      // permite visualizações anônimas
  viewedAt   DateTime  @default(now())

  @@index([propertyId])
  @@index([userId])
}

model PropertyContact {
  id         Int       @id @default(autoincrement())
  property   Property  @relation(fields: [propertyId], references: [id])
  propertyId Int
  user       User?     @relation(fields: [userId], references: [id]) // usuário autenticado que fez contato
  userId     Int?      // pode ser nulo para contatos anônimos
  nome       String?   // caso seja visitante anônimo
  email      String?   // caso seja visitante anônimo
  telefone   String?   // opcional
  mensagem   String?
  createdAt  DateTime  @default(now())

  @@index([propertyId])
  @@index([userId])
}
